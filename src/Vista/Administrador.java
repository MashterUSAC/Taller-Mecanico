/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Modelo.DatosPersistencia;
import modelo.TablaClientesAuto;
import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import modelo.TablaClientesAuto;

/**
 *
 * @author masho
 */
public class Administrador extends javax.swing.JFrame {

    /**
     * Creates new form Administrador
     */
    public Administrador() {
        DatosPersistencia.cargarDatos(repuestos, servicios, clientes);//Cargar Datos
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Repuestos = new javax.swing.JButton();
        Servicio = new javax.swing.JButton();
        ClienteAuto = new javax.swing.JButton();
        ProgresoAuto = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        CerrarSesion = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Importar = new javax.swing.JButton();
        EliminarTodo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Repuestos.setText("Repuestos");
        Repuestos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RepuestosActionPerformed(evt);
            }
        });

        Servicio.setText("Servicios");
        Servicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServicioActionPerformed(evt);
            }
        });

        ClienteAuto.setText("Clientes y Automoviles");
        ClienteAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClienteAutoActionPerformed(evt);
            }
        });

        ProgresoAuto.setText("Progreso Autos");
        ProgresoAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProgresoAutoActionPerformed(evt);
            }
        });

        jButton5.setText("Reportes");

        CerrarSesion.setText("Cerrar Sesion");
        CerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarSesionActionPerformed(evt);
            }
        });

        jLabel1.setText("ADMINISTRADOR");

        jLabel2.setText("Opciones:");

        Importar.setText("Importar");
        Importar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportarActionPerformed(evt);
            }
        });

        EliminarTodo.setText("Eliminar Datos");
        EliminarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Servicio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Repuestos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(ClienteAuto)
                            .addComponent(ProgresoAuto))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(EliminarTodo))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5)
                            .addComponent(Importar)
                            .addComponent(CerrarSesion))))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(CerrarSesion))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)))
                .addGap(4, 4, 4)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Repuestos)
                    .addComponent(Importar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Servicio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(ClienteAuto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(EliminarTodo)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ProgresoAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    

    private Vector<String[]> clientes = new Vector<>();
    private Vector<String[]> repuestos = new Vector<>();
    private Vector<String[]> servicios = new Vector<>();

    public Vector<String[]> getClientes() {
        return clientes;
    }

    public Vector<String[]> getRepuestos() {
        return repuestos;
    }

    public Vector<String[]> getServicios() {
        return servicios;
    }
    
    private int idRepuestos = 1;
    private int idServicios = 1;
    private int contadorID = 1; // Se inicia en 1, pero puede cambiar si hay datos guardados

    private int generarID() {
        return contadorID++;
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                        
        DatosPersistencia.guardarDatos(repuestos, servicios, clientes); // Guardar datos al cerrar
    }
     
    //Sumar Precios 
    private double obtenerPrecioRepuesto(String marca, String modelo) {
    for (String[] repuesto : repuestos) {
        if (repuesto.length >= 6 && repuesto[2].equalsIgnoreCase(marca) && repuesto[3].equalsIgnoreCase(modelo)) {
            try {
                return Double.parseDouble(repuesto[5]); 
            } catch (NumberFormatException e) {
                return 0; // Si el precio del repuesto no es v√°lido, devolvemos 0
            }
        }
    }
    return 0; // Si no se encuentra un repuesto, devolvemos 0 sin mostrar mensaje
    }
    
    
    
    public class Controlador {
    private Vector<String[]> repuestos = new Vector<>();
    private Vector<String[]> servicios = new Vector<>();
    private Vector<String[]> clientes = new Vector<>();

    public Controlador() {
        DatosPersistencia.cargarDatos(repuestos, servicios, clientes);
    }

    public void cerrarAplicacion() {
        DatosPersistencia.guardarDatos(repuestos, servicios, clientes);
    }
    
    
}



    
    private void CerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarSesionActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog (null, "Cerrando Sesion");
        new UserAdmin().setVisible(true);
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor((Component) evt.getSource());
        frame.dispose(); 
    }//GEN-LAST:event_CerrarSesionActionPerformed

    private void RepuestosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RepuestosActionPerformed
        // TODO add your handling code here:
        JFrame ventanaEmergente = new JFrame("Repuestos Importados");
        ventanaEmergente.setSize(1250, 400);
        ventanaEmergente.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        ventanaEmergente.setLayout(new java.awt.BorderLayout());

        DefaultTableModel modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("ID");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Marca");
        modeloTabla.addColumn("Modelo");
        modeloTabla.addColumn("Existencias");
        modeloTabla.addColumn("Precio");
        

        JTable tabla = new JTable(modeloTabla);
        
        //Ajuste autom√°tico de columnas
        TableColumnModel columnModel = tabla.getColumnModel();
        int totalColumnas = tabla.getColumnCount();
        int anchoVentana = ventanaEmergente.getWidth(); // Obtener ancho de la ventana

        for (int i = 0; i < totalColumnas; i++) {
            columnModel.getColumn(i).setPreferredWidth(anchoVentana / totalColumnas); // Distribuir espacio
        }
        
        tabla.setDefaultEditor(Object.class, new javax.swing.DefaultCellEditor(new JTextField()));
        JScrollPane scrollPane = new JScrollPane(tabla);
        ventanaEmergente.add(scrollPane, java.awt.BorderLayout.CENTER);

        for (String[] fila : repuestos) {
            modeloTabla.addRow(fila);
        }
        
            JButton btnEliminar = new JButton("Eliminar Registro");
        btnEliminar.addActionListener(e -> {
            int filaSeleccionada = tabla.getSelectedRow();
            if (filaSeleccionada >= 0) {
                repuestos.remove(filaSeleccionada);
                modeloTabla.removeRow(filaSeleccionada);
                
                DatosPersistencia.guardarDatos(repuestos, servicios, clientes); // Guardar cambios despu√©s de modificar
                JOptionPane.showMessageDialog(null, "Registro eliminado correctamente.");               
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione una fila para eliminar.");
            }
        });
        
        //Repuestos
        JButton btnModificar = new JButton("Guardar Modificaciones");
        btnModificar.addActionListener(e -> {
        int filas = modeloTabla.getRowCount();

        for (int i = 0; i < filas; i++) {
            String id = (String) modeloTabla.getValueAt(i, 0);
            String nombre = (String) modeloTabla.getValueAt(i, 1);
            String marca = (String) modeloTabla.getValueAt(i, 2);
            String modelo = (String) modeloTabla.getValueAt(i, 3);
            String existencias = (String) modeloTabla.getValueAt(i, 4);
            String precio = (String) modeloTabla.getValueAt(i, 5);

            // Buscar el registro con el mismo ID y actualizarlo dentro de la lista "repuestos"
            for (int j = 0; j < repuestos.size(); j++) {
                if (repuestos.get(j)[0].equals(id)) { // Si el ID coincide, actualizar datos
                    repuestos.set(j, new String[]{id, nombre, marca, modelo, existencias, precio});
                    break;
                }
            }
        }

        DatosPersistencia.guardarDatos(repuestos, servicios, clientes); // Guardar cambios correctamente
        JOptionPane.showMessageDialog(null, "Modificaciones guardadas correctamente.");
    });


    
        //Agregar Datos
        JTextField txtNombre = new JTextField(10);
        JTextField txtMarca = new JTextField(10);
        JTextField txtModelo = new JTextField(10);
        JTextField txtExistencias = new JTextField(5);
        JTextField txtPrecio = new JTextField(5);
        JButton btnAgregar = new JButton("Agregar Repuesto");

        btnAgregar.addActionListener(e -> {
            String id = String.valueOf(idRepuestos++);
            repuestos.add(new String[]{id, txtNombre.getText(), txtMarca.getText(), txtModelo.getText(), txtExistencias.getText(), txtPrecio.getText()});
            modeloTabla.addRow(new String[]{id, txtNombre.getText(), txtMarca.getText(), txtModelo.getText(), txtExistencias.getText(), txtPrecio.getText()});
            
            DatosPersistencia.guardarDatos(repuestos, servicios, clientes); // Guardar cambios despu√©s de modificar
            JOptionPane.showMessageDialog(null, "Repuesto agregado correctamente.");
        });

        JPanel panelFormulario = new JPanel();
        panelFormulario.add(new JLabel("Nombre:"));
        panelFormulario.add(txtNombre);
        panelFormulario.add(new JLabel("Marca:"));
        panelFormulario.add(txtMarca);
        panelFormulario.add(new JLabel("Modelo:"));
        panelFormulario.add(txtModelo);
        panelFormulario.add(new JLabel("Existencias:"));
        panelFormulario.add(txtExistencias);
        panelFormulario.add(new JLabel("Precio:"));
        panelFormulario.add(txtPrecio);
        panelFormulario.add(btnAgregar);
        //Datos
    
        JPanel panelBotones = new JPanel();
        panelBotones.add(btnEliminar);
        panelBotones.add(btnModificar);
        ventanaEmergente.add(panelBotones, java.awt.BorderLayout.SOUTH);
        ventanaEmergente.add(panelFormulario, java.awt.BorderLayout.NORTH);
        ventanaEmergente.setVisible(true);
    }//GEN-LAST:event_RepuestosActionPerformed
        
    private void ImportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportarActionPerformed
    
    JFileChooser fileChooser = new JFileChooser();
    int seleccion = fileChooser.showOpenDialog(this);

    if (seleccion == JFileChooser.APPROVE_OPTION) {
        File archivoSeleccionado = fileChooser.getSelectedFile();
        String nombreArchivo = archivoSeleccionado.getName();

        try (BufferedReader br = new BufferedReader(new FileReader(archivoSeleccionado))) {
            if (nombreArchivo.endsWith(".tmr")) {
                String linea;
                while ((linea = br.readLine()) != null) { 
                    String[] datos = linea.split("-");
                    try {
                        double precio = Double.parseDouble(datos[4]); 

                        boolean existe = false;
                        for (String[] repuesto : repuestos) {
                            if (repuesto[1].equals(datos[0])) { // Verificar si el ID ya existe
                                repuesto[2] = datos[1]; 
                                repuesto[3] = datos[2]; 
                                repuesto[4] = datos[3]; 
                                repuesto[5] = String.valueOf(precio);
                                existe = true;
                                break;
                            }
                        }

                        if (!existe) {
                            String idNuevo = String.valueOf(generarID()); // Generar nuevo ID
                            repuestos.add(new String[]{String.valueOf(idRepuestos++), datos[0], datos[1], datos[2], datos[3], String.valueOf(precio)});
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Error al leer precio del repuesto en el archivo.");
                    }
                }
                DatosPersistencia.guardarDatos(repuestos, servicios, clientes);
                JOptionPane.showMessageDialog(null, "Repuestos importados correctamente.");
            } else if (nombreArchivo.endsWith(".tms")) {
                String linea;
                while ((linea = br.readLine()) != null) { 
                    String[] datos = linea.split("-");
                    try {
                        double manoObra = Double.parseDouble(datos[4]); 
                        double precioRepuesto = obtenerPrecioRepuesto(datos[1], datos[2]); 
                        double precioTotal = precioRepuesto + manoObra;

                        boolean existe = false;
                        for (String[] servicio : servicios) {
                            if (servicio[1].equals(datos[0])) { // Verificar si el ID ya existe
                                servicio[2] = datos[1]; 
                                servicio[3] = datos[2]; 
                                servicio[4] = datos[3]; 
                                servicio[5] = datos[4]; 
                                servicio[6] = String.valueOf(precioTotal);
                                existe = true;
                                break;
                            }
                        }

                        if (!existe) {
                            String idNuevo = String.valueOf(generarID()); // Generar nuevo ID
                            servicios.add(new String[]{String.valueOf(idServicios++), datos[0], datos[1], datos[2], datos[3], datos[4], String.valueOf(precioTotal)});
                        }
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(null, "Error al leer precio en el archivo de servicios.");
                    }
                }
                DatosPersistencia.guardarDatos(repuestos, servicios, clientes);
                JOptionPane.showMessageDialog(null, "Servicios importados correctamente.");
            } else if (nombreArchivo.endsWith(".tmca")) {
                String linea;
                while ((linea = br.readLine()) != null) { 
                    String[] datosCliente = linea.split("-");
                    if (datosCliente.length < 6) continue;

                    boolean existe = false;
                    for (String[] cliente : clientes) {
                        if (cliente[0].equals(datosCliente[0])) { // Verificar si el ID ya existe
                            cliente[1] = datosCliente[1];
                            cliente[2] = datosCliente[2];
                            cliente[3] = datosCliente[3];
                            cliente[4] = datosCliente[4];
                            cliente[5] = datosCliente[5];
                            existe = true;
                            break;
                        }
                    }

                    if (!existe) {
                        String idNuevo = String.valueOf(generarID()); // Generar nuevo ID
                        clientes.add(new String[]{datosCliente[0], datosCliente[1], datosCliente[2], datosCliente[3], datosCliente[4], datosCliente[5]});
                    }
                }
                DatosPersistencia.guardarDatos(repuestos, servicios, clientes);
                JOptionPane.showMessageDialog(null, "Clientes importados correctamente.");
            } else {
                JOptionPane.showMessageDialog(null, "Formato de archivo no soportado.");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al leer el archivo: " + e.getMessage());
        }
        }
    }//GEN-LAST:event_ImportarActionPerformed

    private void ServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServicioActionPerformed
        // TODO add your handling code here:
            JFrame ventanaEmergente = new JFrame("Servicios Importados");
        ventanaEmergente.setSize(1250, 400);
        ventanaEmergente.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        ventanaEmergente.setLayout(new java.awt.BorderLayout());

        DefaultTableModel modeloTabla = new DefaultTableModel();
        modeloTabla.addColumn("ID");
        modeloTabla.addColumn("Servicio");
        modeloTabla.addColumn("Marca");
        modeloTabla.addColumn("Modelo");
        modeloTabla.addColumn("Repuestos");
        modeloTabla.addColumn("Mano de Obra");
        modeloTabla.addColumn("Precio Total");

        JTable tabla = new JTable(modeloTabla);
        
        // Ajuste autom√°tico de columnas
        TableColumnModel columnModel = tabla.getColumnModel();
        int totalColumnas = tabla.getColumnCount();
        int anchoVentana = ventanaEmergente.getWidth(); // Obtener ancho de la ventana

        for (int i = 0; i < totalColumnas; i++) {
            columnModel.getColumn(i).setPreferredWidth(anchoVentana / totalColumnas); // Distribuir espacio
        }

        tabla.setDefaultEditor(Object.class, new javax.swing.DefaultCellEditor(new JTextField()));
        JScrollPane scrollPane = new JScrollPane(tabla);
        ventanaEmergente.add(scrollPane, java.awt.BorderLayout.CENTER);

        // Llenar la tabla con los datos ya almacenados sin limpiar la lista
        for (String[] fila : servicios) {
            modeloTabla.addRow(fila);
        }

        JButton btnEliminar = new JButton("Eliminar Registro");
        btnEliminar.addActionListener(e -> {
            int filaSeleccionada = tabla.getSelectedRow();
            if (filaSeleccionada >= 0) {
                servicios.remove(filaSeleccionada);
                modeloTabla.removeRow(filaSeleccionada);
                
                DatosPersistencia.guardarDatos(repuestos, servicios, clientes); // Guardar cambios despu√©s de modificar
                JOptionPane.showMessageDialog(null, "Registro eliminado correctamente.");
            } else {
                JOptionPane.showMessageDialog(null, "Seleccione una fila para eliminar.");
            }
        });

        JButton btnModificar = new JButton("Guardar Modificaciones");
        btnModificar.addActionListener(e -> {
            int filas = modeloTabla.getRowCount();

            for (int i = 0; i < filas; i++) {
                String id = (String) modeloTabla.getValueAt(i, 0);
                String nombreServicio = (String) modeloTabla.getValueAt(i, 1);
                String cliente = (String) modeloTabla.getValueAt(i, 2);
                String repuestoAsociado = (String) modeloTabla.getValueAt(i, 3);
                String descripcion = (String) modeloTabla.getValueAt(i, 4);
                String manoObra = (String) modeloTabla.getValueAt(i, 5);
                String precioTotal = (String) modeloTabla.getValueAt(i, 6);

                // Buscar el servicio con el mismo ID y actualizarlo
                for (int j = 0; j < servicios.size(); j++) {
                    if (servicios.get(j)[0].equals(id)) { // Si el ID coincide, actualizar datos
                        servicios.set(j, new String[]{id, nombreServicio, cliente, repuestoAsociado, descripcion, manoObra, precioTotal});
                        break;
                    }
                }
            }

            DatosPersistencia.guardarDatos(null, servicios, null); // Solo guarda servicios
            JOptionPane.showMessageDialog(null, "Modificaciones guardadas correctamente.");
        });



        // Campos de entrada para agregar nuevos servicios con ID autom√°tico
        JTextField txtServicio = new JTextField(10);
        JTextField txtMarca = new JTextField(10);
        JTextField txtModelo = new JTextField(10);
        JTextField txtRepuestos = new JTextField(15);
        JTextField txtManoObra = new JTextField(5);    
        JButton btnAgregar = new JButton("Agregar Servicio");

        btnAgregar.addActionListener(e -> {
            String servicio = txtServicio.getText();
            String marca = txtMarca.getText();
            String modelo = txtModelo.getText();
            String repuestos = txtRepuestos.getText();
            String manoObra = txtManoObra.getText();
            double precioRepuesto = obtenerPrecioRepuesto(marca, modelo);
            
                if (!servicio.isEmpty() && !marca.isEmpty() && !modelo.isEmpty() && !repuestos.isEmpty() && !manoObra.isEmpty()) {
            try {
                double manoDeObraNum = Double.parseDouble(manoObra);
                double total = precioRepuesto + manoDeObraNum; // Calcular el precio total
                String id = String.valueOf(idServicios++);
                servicios.add(new String[]{id, servicio, marca, modelo, repuestos, manoObra, String.valueOf(total)});
                modeloTabla.addRow(new String[]{id, servicio, marca, modelo, repuestos, manoObra, String.valueOf(total)});
                
                
                JOptionPane.showMessageDialog(null, "Servicio agregado correctamente.");
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Error: Mano de obra debe ser un n√∫mero v√°lido.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Complete todos los campos.");
        }
        });

        JPanel panelFormulario = new JPanel();
        panelFormulario.add(new JLabel("Servicio:"));
        panelFormulario.add(txtServicio);
        
        panelFormulario.add(new JLabel("Marca:"));
        panelFormulario.add(txtMarca);
        panelFormulario.add(new JLabel("Modelo:"));
        panelFormulario.add(txtModelo);
        panelFormulario.add(new JLabel("Repuestos:"));
        panelFormulario.add(txtRepuestos);
        panelFormulario.add(new JLabel("Mano de Obra:"));
        panelFormulario.add(txtManoObra);
        panelFormulario.add(btnAgregar);

        JPanel panelBotones = new JPanel();
        panelBotones.add(btnEliminar);
        panelBotones.add(btnModificar);
        ventanaEmergente.add(panelBotones, java.awt.BorderLayout.SOUTH);
        ventanaEmergente.add(panelFormulario, java.awt.BorderLayout.NORTH);
        ventanaEmergente.setVisible(true);
    }//GEN-LAST:event_ServicioActionPerformed

    private void ClienteAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClienteAutoActionPerformed
        // TODO add your handling code here:
        
        
    TablaClientesAuto tabla = new TablaClientesAuto();
    tabla.setVisible(true);

        
        /*JFrame ventanaEmergente = new JFrame("Clientes y Autom√≥viles");
    ventanaEmergente.setSize(1250, 400);
    ventanaEmergente.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    ventanaEmergente.setLayout(new java.awt.BorderLayout());

    DefaultTableModel modeloTabla = new DefaultTableModel();
    modeloTabla.addColumn("ID");
    modeloTabla.addColumn("Nombre");
    modeloTabla.addColumn("Usuario");
    modeloTabla.addColumn("Contrase√±a");
    modeloTabla.addColumn("Tipo Cliente");
    modeloTabla.addColumn("Autom√≥viles");

    JTable tabla = new JTable(modeloTabla);
    
        // Ajuste autom√°tico de columnas
    TableColumnModel columnModel = tabla.getColumnModel();
    int totalColumnas = tabla.getColumnCount();
    int anchoVentana = ventanaEmergente.getWidth(); // Obtener ancho de la ventana

    for (int i = 0; i < totalColumnas; i++) {
        columnModel.getColumn(i).setPreferredWidth(anchoVentana / totalColumnas); // Distribuir espacio
    }

    tabla.setDefaultEditor(Object.class, new javax.swing.DefaultCellEditor(new JTextField()));
    JScrollPane scrollPane = new JScrollPane(tabla);
    ventanaEmergente.add(scrollPane, java.awt.BorderLayout.CENTER);

    // Llenar la tabla con los datos guardados en el vector clientes
    for (String[] fila : clientes) {
        modeloTabla.addRow(fila);
    }

    JButton btnEliminar = new JButton("Eliminar Cliente");
    btnEliminar.addActionListener(e -> {
        int filaSeleccionada = tabla.getSelectedRow();
        if (filaSeleccionada >= 0) {
            clientes.remove(filaSeleccionada);
            modeloTabla.removeRow(filaSeleccionada);
            
            DatosPersistencia.guardarDatos(repuestos, servicios, clientes); // Guardar cambios despu√©s de modificar
            JOptionPane.showMessageDialog(null, "Cliente eliminado correctamente.");
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un cliente para eliminar.");
        }
    });

    JButton btnModificar = new JButton("Guardar Modificaciones");
        btnModificar.addActionListener(e -> {
        int filas = modeloTabla.getRowCount();

        for (int i = 0; i < filas; i++) {
            String id = (String) modeloTabla.getValueAt(i, 0);
            String nombre = (String) modeloTabla.getValueAt(i, 1);
            String usuario = (String) modeloTabla.getValueAt(i, 2);
            String contrase√±a = (String) modeloTabla.getValueAt(i, 3);
            String tipoCliente = (String) modeloTabla.getValueAt(i, 4);
            String automoviles = (String) modeloTabla.getValueAt(i, 5);

            // Buscar el registro con el mismo ID y actualizarlo
            for (int j = 0; j < clientes.size(); j++) {
                if (clientes.get(j)[0].equals(id)) { // Si el ID coincide, actualizar datos
                    clientes.set(j, new String[]{id, nombre, usuario, contrase√±a, tipoCliente, automoviles});
                    break;
                }
            }
            
            // Verificar si el ID ya existe en la lista
            for (String[] cliente : clientes) {
                if (cliente[0].equals(id)) {
                    cliente[1] = nombre;
                    cliente[2] = usuario;
                    cliente[3] = contrase√±a;
                    cliente[4] = tipoCliente;
                    cliente[5] = automoviles;
                    break;
                }
            }
            
            
        }

        DatosPersistencia.guardarDatos(repuestos, servicios, clientes); // Guardar sin duplicados
        JOptionPane.showMessageDialog(null, "Modificaciones guardadas correctamente.");
    });


    // Formulario para agregar clientes nuevos
    JTextField txtNombre = new JTextField(10);
    JTextField txtUsuario = new JTextField(10);
    JTextField txtContrase√±a = new JTextField(10);
    JTextField txtTipoCliente = new JTextField(10);
    JTextField txtAutomoviles = new JTextField(15);
    JButton btnAgregar = new JButton("Agregar Cliente");

    btnAgregar.addActionListener(e -> {
        String id = String.valueOf(clientes.size() + 1); // Generar nuevo ID
        clientes.add(new String[]{id, txtNombre.getText(), txtUsuario.getText(), txtContrase√±a.getText(), txtTipoCliente.getText(), txtAutomoviles.getText()});
        modeloTabla.addRow(new String[]{id, txtNombre.getText(), txtUsuario.getText(), txtContrase√±a.getText(), txtTipoCliente.getText(), txtAutomoviles.getText()});
        DatosPersistencia.guardarDatos(repuestos, servicios, clientes); // Guardar cambios despu√©s de modificar
        JOptionPane.showMessageDialog(null, "Cliente agregado correctamente.");
    });

    JPanel panelFormulario = new JPanel();
    panelFormulario.add(new JLabel("Nombre:"));
    panelFormulario.add(txtNombre);
    panelFormulario.add(new JLabel("Usuario:"));
    panelFormulario.add(txtUsuario);
    panelFormulario.add(new JLabel("Contrase√±a:"));
    panelFormulario.add(txtContrase√±a);
    panelFormulario.add(new JLabel("Tipo Cliente:"));
    panelFormulario.add(txtTipoCliente);
    panelFormulario.add(new JLabel("Autom√≥viles:"));
    panelFormulario.add(txtAutomoviles);
    panelFormulario.add(btnAgregar);

    JPanel panelBotones = new JPanel();
    panelBotones.add(btnEliminar);
    panelBotones.add(btnModificar);
    ventanaEmergente.add(panelBotones, java.awt.BorderLayout.SOUTH);
    ventanaEmergente.add(panelFormulario, java.awt.BorderLayout.NORTH);
    ventanaEmergente.setVisible(true);*/
    }//GEN-LAST:event_ClienteAutoActionPerformed

    private void ProgresoAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProgresoAutoActionPerformed
        // TODO add your handling code here:
        JFrame ventanaEmergente = new JFrame("Progreso de Autom√≥viles");
    ventanaEmergente.setSize(1300, 500);
    ventanaEmergente.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    ventanaEmergente.setLayout(new java.awt.GridLayout(4, 1, 10, 10)); // Espaciado entre secciones

    // Tablas para cada categor√≠a
    String[] columnasEspera = {"Orden", "Autom√≥vil", "Cliente"};
    String[] columnasAtencion = {"Orden", "Autom√≥vil", "Cliente", "Mec√°nico"};
    String[] columnasListos = {"Orden", "Autom√≥vil", "Cliente", "Servicio", "Total"};
    String[] columnasPendientes = {"Cliente", "Total Factura", "Estado"};
    
    JLabel lblEspera = new JLabel("üöó Veh√≠culos en Espera", JLabel.CENTER);
    JLabel lblAtencion = new JLabel("üîß Veh√≠culos en Mantenimiento", JLabel.CENTER);
    JLabel lblListos = new JLabel("‚úÖ Veh√≠culos Listos para Entrega", JLabel.CENTER);
    JLabel lblPendientes = new JLabel("üí∞ Clientes con Facturas Pendientes", JLabel.CENTER);

    JTable tablaEspera = new JTable(new DefaultTableModel(columnasEspera, 0));
    JTable tablaAtencion = new JTable(new DefaultTableModel(columnasAtencion, 0));
    JTable tablaListos = new JTable(new DefaultTableModel(columnasListos, 0));
    JTable tablaPendientes = new JTable(new DefaultTableModel(columnasPendientes, 0));
    
    // Crear paneles para cada categor√≠a con t√≠tulo y tabla
    JPanel panelEspera = new JPanel(new java.awt.BorderLayout());
    panelEspera.setBorder(BorderFactory.createTitledBorder("üöó Veh√≠culos en Espera"));
    panelEspera.add(lblEspera, java.awt.BorderLayout.NORTH);
    panelEspera.add(new JScrollPane(tablaEspera), java.awt.BorderLayout.CENTER);

    JPanel panelAtencion = new JPanel(new java.awt.BorderLayout());
    panelAtencion.setBorder(BorderFactory.createTitledBorder("üîß Veh√≠culos en Mantenimiento"));
    panelAtencion.add(lblAtencion, java.awt.BorderLayout.NORTH);
    panelAtencion.add(new JScrollPane(tablaAtencion), java.awt.BorderLayout.CENTER);

    JPanel panelListos = new JPanel(new java.awt.BorderLayout());
    panelListos.setBorder(BorderFactory.createTitledBorder("‚úÖ Veh√≠culos Listos para Entrega"));
    panelListos.add(lblListos, java.awt.BorderLayout.NORTH);
    panelListos.add(new JScrollPane(tablaListos), java.awt.BorderLayout.CENTER);

    JPanel panelPendientes = new JPanel(new java.awt.BorderLayout());
    panelPendientes.setBorder(BorderFactory.createTitledBorder("üí∞ Clientes con Facturas Pendientes"));
    panelPendientes.add(lblPendientes, java.awt.BorderLayout.NORTH);
    panelPendientes.add(new JScrollPane(tablaPendientes), java.awt.BorderLayout.CENTER);

    // Agregar los paneles a la ventana
    ventanaEmergente.add(panelEspera);
    ventanaEmergente.add(panelAtencion);
    ventanaEmergente.add(panelListos);
    ventanaEmergente.add(panelPendientes);

    ventanaEmergente.add(new JScrollPane(tablaEspera));
    ventanaEmergente.add(new JScrollPane(tablaAtencion));
    ventanaEmergente.add(new JScrollPane(tablaListos));
    ventanaEmergente.add(new JScrollPane(tablaPendientes));

    // Agregar datos simulados (en un proyecto real, vendr√≠an de una base de datos)
    DefaultTableModel modeloEspera = (DefaultTableModel) tablaEspera.getModel();
    modeloEspera.addRow(new Object[]{"1", "Honda Civic", "Robert"});
    modeloEspera.addRow(new Object[]{"2", "BMW", "Fernando"});

    DefaultTableModel modeloAtencion = (DefaultTableModel) tablaAtencion.getModel();
    modeloAtencion.addRow(new Object[]{"1", "Honda Civic", "Robert", "Hugo"});
    modeloAtencion.addRow(new Object[]{"2", "BMW", "Fernando", "Jorge"});

    DefaultTableModel modeloListos = (DefaultTableModel) tablaListos.getModel();
    modeloListos.addRow(new Object[]{"1", "Honda Civic", "Robert", "Cambio de aceite", "152"});
    modeloListos.addRow(new Object[]{"2", "BMW", "Fernando", "Servicio frenos", "650"});

    DefaultTableModel modeloPendientes = (DefaultTableModel) tablaPendientes.getModel();
    modeloPendientes.addRow(new Object[]{"Robert", "152", "Pendiente"});
    modeloPendientes.addRow(new Object[]{"Fernando", "650", "Pagado"});

    ventanaEmergente.setVisible(true);
    }//GEN-LAST:event_ProgresoAutoActionPerformed

    private void EliminarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarTodoActionPerformed
        int confirmacion = JOptionPane.showConfirmDialog(null, 
        "‚ö† ¬øEst√°s seguro de que deseas eliminar TODOS los datos?\nEsta acci√≥n no se puede deshacer.", 
        "Confirmaci√≥n", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

    if (confirmacion == JOptionPane.YES_OPTION) {
        repuestos.clear();
        servicios.clear();
        clientes.clear();

        DatosPersistencia.guardarDatos(repuestos, servicios, clientes); // Guardar el estado vac√≠o

        JOptionPane.showMessageDialog(null, "Todos los datos han sido eliminados correctamente.");
    }
    }//GEN-LAST:event_EliminarTodoActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Administrador().setVisible(true);      
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CerrarSesion;
    private javax.swing.JButton ClienteAuto;
    private javax.swing.JButton EliminarTodo;
    private javax.swing.JButton Importar;
    private javax.swing.JButton ProgresoAuto;
    private javax.swing.JButton Repuestos;
    private javax.swing.JButton Servicio;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}

